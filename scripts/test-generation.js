/**
 * Test script for blog generation system
 * Uses mock data to test functionality without API calls
 */

const fs = require('fs-extra');
const path = require('path');

class BlogGeneratorTest {
  constructor() {
    this.baseDir = process.cwd();
    this.articlesDir = path.join(this.baseDir, 'articles');
    this.imagesDir = path.join(this.baseDir, 'assets', 'images', 'articles');
  }

  async runTests() {
    console.log('üß™ Iniciando pruebas del sistema de generaci√≥n de blog...\n');

    try {
      // Test 1: Directory creation
      await this.testDirectoryCreation();
      
      // Test 2: Mock article generation
      await this.testMockArticleGeneration();
      
      // Test 3: HTML file creation
      await this.testHtmlFileCreation();
      
      // Test 4: Index update
      await this.testIndexUpdate();
      
      console.log('\n‚úÖ Todas las pruebas pasaron exitosamente!');
      console.log('\nüìã Pr√≥ximos pasos:');
      console.log('1. Configurar OPENAI_API_KEY en GitHub Secrets');
      console.log('2. Configurar UNSPLASH_ACCESS_KEY en GitHub Secrets (opcional)');
      console.log('3. El sistema generar√° art√≠culos autom√°ticamente los lunes y jueves');
      console.log('4. Tambi√©n puedes generar manualmente con: npm run generate-blog');
      
      return true;
      
    } catch (error) {
      console.error('\n‚ùå Error en las pruebas:', error);
      return false;
    }
  }

  async testDirectoryCreation() {
    console.log('üîß Test 1: Creaci√≥n de directorios...');
    
    await fs.ensureDir(this.articlesDir);
    await fs.ensureDir(this.imagesDir);
    
    const articlesExists = await fs.pathExists(this.articlesDir);
    const imagesExists = await fs.pathExists(this.imagesDir);
    
    if (articlesExists && imagesExists) {
      console.log('   ‚úÖ Directorios creados correctamente');
    } else {
      throw new Error('Fall√≥ la creaci√≥n de directorios');
    }
  }

  async testMockArticleGeneration() {
    console.log('üîß Test 2: Generaci√≥n de art√≠culo mock...');
    
    const mockArticle = {
      title: 'C√≥mo Mejorar tu Historial Crediticio en 2025',
      introduction: 'El historial crediticio es uno de los factores m√°s importantes para acceder a financiamiento favorable. En este art√≠culo te explicamos las mejores estrategias para mejorarlo.',
      sections: [
        {
          subtitle: 'Entendiendo tu Historial Crediticio',
          content: 'Tu historial crediticio es un registro de c√≥mo has manejado tus deudas y pagos a lo largo del tiempo. Este incluye informaci√≥n sobre tarjetas de cr√©dito, pr√©stamos, y otros productos financieros.'
        },
        {
          subtitle: 'Estrategias para Mejorar tu Score',
          content: 'Existen varias estrategias comprobadas para mejorar tu puntuaci√≥n crediticia: pagar a tiempo, mantener bajos saldos, y revisar regularmente tu reporte de cr√©dito.'
        },
        {
          subtitle: 'Beneficios de un Buen Historial',
          content: 'Un buen historial crediticio te abre puertas a mejores condiciones de financiamiento, tasas m√°s bajas, y productos financieros exclusivos como los cr√©ditos v√≠a n√≥mina.'
        }
      ],
      conclusion: 'Mejorar tu historial crediticio es una inversi√≥n a largo plazo que te beneficiar√° en todas tus decisiones financieras futuras. Con disciplina y las estrategias correctas, puedes lograr un perfil crediticio excelente.',
      keyPoints: [
        'Paga siempre a tiempo para mantener un historial limpio',
        'Mant√©n tus saldos de tarjetas por debajo del 30% del l√≠mite',
        'Revisa tu reporte de cr√©dito al menos una vez al a√±o'
      ],
      metaDescription: 'Aprende las mejores estrategias para mejorar tu historial crediticio en 2025. Consejos pr√°cticos y efectivos de Financiera Incentiva.',
      date: '3 de julio de 2025',
      slug: 'como-mejorar-tu-historial-crediticio-2025'
    };

    if (mockArticle.title && mockArticle.sections.length > 0) {
      console.log('   ‚úÖ Estructura de art√≠culo v√°lida');
    } else {
      throw new Error('Estructura de art√≠culo inv√°lida');
    }
  }

  async testHtmlFileCreation() {
    console.log('üîß Test 3: Creaci√≥n de archivo HTML...');
    
    const testHtml = `<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Test Article | Financiera Incentiva</title>
</head>
<body>
    <h1>Test Article</h1>
    <p>This is a test article generated by the automated system.</p>
</body>
</html>`;

    const testFilePath = path.join(this.baseDir, 'test-article.html');
    await fs.writeFile(testFilePath, testHtml, 'utf8');
    
    const fileExists = await fs.pathExists(testFilePath);
    if (fileExists) {
      // Clean up test file
      await fs.remove(testFilePath);
      console.log('   ‚úÖ Creaci√≥n de HTML exitosa');
    } else {
      throw new Error('Fall√≥ la creaci√≥n del archivo HTML');
    }
  }

  async testIndexUpdate() {
    console.log('üîß Test 4: Actualizaci√≥n de √≠ndice...');
    
    const indexPath = path.join(this.articlesDir, 'index.json');
    const testIndex = [
      {
        title: 'Test Article',
        slug: 'test-article',
        date: new Date().toISOString(),
        description: 'This is a test article',
        path: 'test-article.html',
        category: 'Test'
      }
    ];

    await fs.writeJson(indexPath, testIndex, { spaces: 2 });
    
    const indexExists = await fs.pathExists(indexPath);
    if (indexExists) {
      const savedIndex = await fs.readJson(indexPath);
      if (savedIndex.length === 1 && savedIndex[0].title === 'Test Article') {
        console.log('   ‚úÖ Actualizaci√≥n de √≠ndice exitosa');
      } else {
        throw new Error('Contenido del √≠ndice incorrecto');
      }
    } else {
      throw new Error('Fall√≥ la creaci√≥n del √≠ndice');
    }
  }
}

// Execute if run directly
if (require.main === module) {
  const tester = new BlogGeneratorTest();
  tester.runTests()
    .then(success => {
      process.exit(success ? 0 : 1);
    })
    .catch(error => {
      console.error('‚ùå Error fatal en pruebas:', error);
      process.exit(1);
    });
}

module.exports = BlogGeneratorTest; 